version: 2.1
jobs:
  build:
    docker:
      - image: imbios/bun-node:18-slim
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "bun.lockb" }}
      - run:
          name: Test If we have a valid build or not
          command: |
            pwd
            bun install
            bun run build
      - save_cache:
          key: dependency-cache-{{ checksum "bun.lockb" }}
          paths:
            - ./node_modules

      - persist_to_workspace:
          root: ./
          paths:
            - .env
            - .next/
            - public/


  package:
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      - persist_to_workspace:
          root: ./
          paths:
            - docker/prod/*


  deploy:
    docker:
      - image: cimg/base:2024.02

    parameters:
      host:
        type: string
        default: $DEV_HOST


    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Login to the server and deploy
          command: |
              ssh -o StrictHostKeyChecking=no << parameters.host >> 'exit'
              ssh << parameters.host >> "rm -rf ~/webapp/ || true"
              pwd
              ls -a
              tar -czf /tmp/webapp.tar.gz .
              ls /tmp
              ssh << parameters.host >> "mkdir webapp"
              scp /tmp/webapp.tar.gz << parameters.host >>:~/webapp/
              # # scp -r /home/circleci/project/ << parameters.host >>:~/webapp/
              # ssh << parameters.host >> "tar -xzf ~/webapp/webapp.tar.gz -C ~/webapp/ && rm -f ~/webapp/webapp.tar.gz"
              # ssh << parameters.host >> "cd webapp && docker compose -f docker/prod/docker-compose.yml build"
              # ssh << parameters.host >> "cd webapp && docker container rm -f lancon-webapp || true"
              # ssh << parameters.host >> "cd webapp && docker image prune -f"
              # ssh << parameters.host >> "cd webapp && docker compose -f docker/prod/docker-compose.yml up -d"

               
# With package
workflows:
  build-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^release-.*/

      - package:
            filters:
               tags:
                  only: /^release-.*/
            requires:
              - build
           
      - deploy:
          filters:
            tags:
               only: /^release-.*/
          requires:
            - package
